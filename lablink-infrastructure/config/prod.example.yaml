# LabLink Production Configuration
# For production deployments with S3 backend
# Copy to config.yaml for production
#
# Usage:
#   cp lablink-infrastructure/config/prod.example.yaml lablink-infrastructure/config/config.yaml
#   # Edit config.yaml with your values
#   ./scripts/setup-aws-infrastructure.sh  # Creates S3, DynamoDB, Route53
#   cd lablink-infrastructure
#   ../scripts/init-terraform.sh prod
#   terraform apply -var="resource_suffix=prod"

db:
  dbname: "lablink_db"
  user: "lablink"
  password: "PLACEHOLDER_DB_PASSWORD"  # Injected from GitHub secret at deploy time
  host: "localhost"
  port: 5432
  table_name: "vms"
  message_channel: "vm_updates"

machine:
  # Client VM instance type (production workloads)
  machine_type: "g4dn.xlarge"  # GPU instance for ML workloads

  # Docker image for client VMs (use PINNED version for prod)
  image: "ghcr.io/talmolab/lablink-client-base-image:linux-amd64-v1.0.0"  # PINNED VERSION

  # AMI ID for your AWS region (Ubuntu 24.04 with Docker + Nvidia GPU Driver)
  ami_id: "ami-0601752c11b394251"  # us-west-2 Ubuntu 24.04 custom AMI

  # Git repository with your production data/code
  repository: "https://github.com/YOUR_ORG/YOUR_PROD_REPO.git"

  # Software identifier
  software: "sleap"

  # File extension
  extension: "slp"

# Allocator service configuration
allocator:
  # IMPORTANT: Use specific version tag for production (not latest!)
  image_tag: "linux-amd64-v1.0.0"  # PINNED VERSION - update deliberately

app:
  admin_user: "admin"
  admin_password: "PLACEHOLDER_ADMIN_PASSWORD"  # Injected from GitHub secret at deploy time
  region: "us-west-2"

dns:
  # Enable DNS for production
  enabled: true
  terraform_managed: true  # Let Terraform manage DNS records
  domain: "lablink.example.com"  # Your Route53 hosted zone
  zone_id: ""  # Will be set by setup-aws-infrastructure.sh
  app_name: "lablink"
  pattern: "auto"  # Creates: lablink.example.com (no subdomain for prod)
  custom_subdomain: ""
  create_zone: false  # Use existing zone

eip:
  # Consider persistent EIP for production (keeps IP across redeploys)
  strategy: "persistent"  # Reuses existing EIP with tag
  tag_name: "lablink-eip"  # Will become lablink-eip-prod

ssl:
  # Use Let's Encrypt production certs
  provider: "letsencrypt"
  email: "admin@example.com"  # Your email for Let's Encrypt notifications
  staging: false  # Production certs = trusted HTTPS (rate limited)

# S3 bucket for Terraform state (must be unique across ALL of AWS)
# Example: if your org is "acme", use "tf-state-lablink-acme-prod"
bucket_name: "tf-state-lablink-YOURORG-prod"  # Replace YOURORG with something unique
