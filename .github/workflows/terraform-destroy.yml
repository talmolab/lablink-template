name: Destroy LabLink Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: "Type 'yes' to confirm destruction"
        required: true
        default: "no"
        type: string
      environment:
        description: "Environment to destroy (test, prod, or ci-test) - dev uses local state and should only be used locally"
        required: true
        default: "test"
        type: choice
        options:
          - test
          - prod
          - ci-test

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    if: github.event.inputs.confirm_destroy == 'yes'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION || 'us-west-2' }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      # Initialize terraform to access outputs (IP and SSH key)
      - name: Terraform Init Infrastructure
        working-directory: lablink-infrastructure
        run: |
          # Extract bucket name from config.yaml for S3 backend
          BUCKET_NAME=$(grep "^bucket_name:" config/config.yaml | awk '{print $2}' | tr -d '"')
          terraform init \
            -backend-config=backend-${{ github.event.inputs.environment }}.hcl \
            -backend-config="bucket=$BUCKET_NAME"

      # Destroy Client VMs using S3 backend (state-only, no terraform files needed)
      - name: Destroy Client VMs via S3 Backend
        continue-on-error: true
        run: |
          echo "Destroying client VMs from S3 state for environment: ${{ github.event.inputs.environment }}"

          mkdir -p /tmp/client-destroy
          cd /tmp/client-destroy

          # Extract bucket name and region from config.yaml
          BUCKET_NAME=$(grep "^bucket_name:" $GITHUB_WORKSPACE/lablink-infrastructure/config/config.yaml | awk '{print $2}' | tr -d '"')
          REGION=$(awk '/^app:/,/^[a-z]/ {if (/^  region:/) print $2}' $GITHUB_WORKSPACE/lablink-infrastructure/config/config.yaml | tr -d '"')

          echo "Using S3 bucket: $BUCKET_NAME"
          echo "Region: $REGION"
          echo "State key: ${{ github.event.inputs.environment }}/client/terraform.tfstate"

          # Create minimal backend configuration
          cat > backend.tf <<'BACKEND_EOF'
          terraform {
            backend "s3" {}
          }
          BACKEND_EOF

          # Create backend config with values from config.yaml
          cat > backend.hcl <<BACKEND_HCL
          key            = "${{ github.event.inputs.environment }}/client/terraform.tfstate"
          region         = "$REGION"
          dynamodb_table = "lock-table"
          encrypt        = true
          BACKEND_HCL

          # Initialize terraform with the S3 backend
          terraform init \
            -backend-config=backend.hcl \
            -backend-config="bucket=$BUCKET_NAME"

          # Check if there are any resources in state
          if ! terraform show 2>/dev/null | grep -q "resource"; then
            echo "✓ No client VMs in terraform state"
          else
            # Destroy all client VMs using state only (no configuration files needed)
            echo "Destroying client VMs..."
            if terraform destroy -auto-approve; then
              echo "✓ Client VMs destroyed successfully"
            else
              echo "⚠ Client VM destruction failed (non-fatal)"
            fi
          fi

      - name: Terraform Destroy Infrastructure
        working-directory: lablink-infrastructure
        run: |
          terraform destroy -auto-approve \
            -var="resource_suffix=${{ github.event.inputs.environment }}"
