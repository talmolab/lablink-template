name: Terraform Deploy

on:
  push:
    branches:
      - test

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, test, prod)"
        required: true
        default: dev
      image_tag:
        description: "Docker image tag to deploy (only for prod)"
        required: false

  repository_dispatch:
    types: [deploy-prod-image]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Determine Environment
        id: setenv
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            case "${{ github.event.inputs.environment }}" in
              dev|test|prod)
                echo "env=${{ github.event.inputs.environment }}" >> "$GITHUB_OUTPUT"
                ;;
              *)
                echo "Unsupported environment: ${{ github.event.inputs.environment }}"
                exit 1
                ;;
            esac
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "env=${{ github.event.client_payload.environment }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref_name }}" = "test" ]; then
            echo "env=test" >> "$GITHUB_OUTPUT"
          else
            echo "Unsupported branch or manual input"
            exit 1
          fi

      - name: Debug Environment
        run: |
          echo "Using environment: ${{ steps.setenv.outputs.env }}"

      - name: Terraform Init
        working-directory: lablink-allocator
        run: |
          if [ "${{ steps.setenv.outputs.env }}" = "dev" ]; then
            terraform init
          else
            terraform init -backend-config=backend-${{ steps.setenv.outputs.env }}.hcl
          fi

      - name: Terraform Format
        working-directory: lablink-allocator
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: lablink-allocator
        run: terraform validate

      - name: Determine Image Tag
        id: getimagetag
        run: |
          if [ "${{ steps.setenv.outputs.env }}" = "prod" ]; then
            if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
              if [ -z "${{ github.event.client_payload.image_tag }}" ]; then
                echo "Error: image_tag must be provided for prod deployments"
                exit 1
              fi
              echo "tag=${{ github.event.client_payload.image_tag }}" >> "$GITHUB_OUTPUT"

            elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              if [ -z "${{ github.event.inputs.image_tag }}" ]; then
                echo "Error: image_tag must be provided for prod deployments"
                exit 1
              fi
              echo "tag=${{ github.event.inputs.image_tag }}" >> "$GITHUB_OUTPUT"

            else
              echo "Error: image_tag must be provided for prod deployments"
              exit 1
            fi

          else
            echo "Using default image tag for non-prod: linux-amd64-latest-test"
            echo "tag=linux-amd64-latest-test" >> "$GITHUB_OUTPUT"
          fi

      - name: Image Tag Debug
        run: |
          echo "Using image tag: ${{ steps.getimagetag.outputs.tag }}"

      - name: Terraform Plan
        working-directory: lablink-allocator
        run: |
          terraform plan \
            -var="resource_suffix=${{ steps.setenv.outputs.env }}" \
            -var="allocator_image_tag=${{ steps.getimagetag.outputs.tag }}"

      - name: Terraform Apply
        id: apply
        working-directory: lablink-allocator
        run: |
          terraform apply -auto-approve \
            -var="resource_suffix=${{ steps.setenv.outputs.env }}" \
            -var="allocator_image_tag=${{ steps.getimagetag.outputs.tag }}" \
            -var-file="terraform.tfvars"
        continue-on-error: true

      - name: Save PEM Key to Artifact
        if: steps.apply.outcome == 'success'
        working-directory: lablink-allocator
        run: |
          terraform output -raw private_key_pem > lablink-key.pem
          chmod 600 lablink-key.pem
          mkdir -p artifact-output
          mv lablink-key.pem artifact-output/

      - name: Upload PEM Artifact
        if: steps.apply.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: lablink-key-${{ steps.setenv.outputs.env }}
          path: artifact-output/lablink-key.pem
          retention-days: 1

      - name: Validate DNS Configuration
        if: steps.apply.outcome == 'success'
        working-directory: lablink-allocator/lablink-allocator-service
        run: |
          echo "üîç Validating DNS configuration..."

          # Check if config.yaml has valid DNS structure
          if ! grep -q "^dns:" conf/config.yaml; then
            echo "‚ö†Ô∏è  Warning: DNS configuration not found in config.yaml"
            exit 0
          fi

          # Extract DNS settings
          DNS_ENABLED=$(grep -A 10 "^dns:" conf/config.yaml | grep "enabled:" | awk '{print $2}')

          if [ "$DNS_ENABLED" = "true" ]; then
            echo "‚úÖ DNS is enabled in configuration"

            DNS_DOMAIN=$(grep -A 10 "^dns:" conf/config.yaml | grep "domain:" | awk '{print $2}' | tr -d '"')
            DNS_PATTERN=$(grep -A 10 "^dns:" conf/config.yaml | grep "pattern:" | awk '{print $2}' | tr -d '"')

            echo "   Domain: $DNS_DOMAIN"
            echo "   Pattern: $DNS_PATTERN"

            # Validate required fields are not empty
            if [ -z "$DNS_DOMAIN" ]; then
              echo "‚ùå Error: DNS enabled but domain is empty"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è  DNS is disabled in configuration"
          fi

      - name: Verify DNS Resolution
        if: steps.apply.outcome == 'success'
        working-directory: lablink-allocator
        run: |
          echo "üåê Verifying DNS resolution..."

          FQDN=$(terraform output -raw allocator_fqdn 2>/dev/null || echo "")
          PUBLIC_IP=$(terraform output -raw ec2_public_ip)

          if [ -z "$FQDN" ] || [ "$FQDN" = "N/A" ]; then
            echo "‚ÑπÔ∏è  No DNS configured (using IP address only)"
            exit 0
          fi

          echo "Testing DNS resolution for: $FQDN"
          echo "Expected IP: $PUBLIC_IP"

          # Wait for DNS propagation (max 60 seconds)
          for i in {1..12}; do
            RESOLVED_IP=$(nslookup "$FQDN" 8.8.8.8 2>/dev/null | grep -A1 "Name:" | grep "Address:" | awk '{print $2}' | head -1)

            if [ "$RESOLVED_IP" = "$PUBLIC_IP" ]; then
              echo "‚úÖ DNS resolution successful!"
              echo "   $FQDN ‚Üí $RESOLVED_IP"
              exit 0
            fi

            if [ $i -lt 12 ]; then
              echo "‚è≥ Waiting for DNS propagation (attempt $i/12)..."
              sleep 5
            fi
          done

          echo "‚ö†Ô∏è  Warning: DNS resolution failed or propagation delayed"
          echo "   This may be normal for newly created DNS records"
          echo "   Manual verification recommended: nslookup $FQDN"

      - name: Deployment Summary
        if: steps.apply.outcome == 'success'
        working-directory: lablink-allocator
        run: |
          echo "‚úÖ Deployment succeeded!"
          echo "Environment: ${{ steps.setenv.outputs.env }}"

          echo ""
          echo "üåê Allocator FQDN:"
          terraform output -raw allocator_fqdn

          echo ""
          echo "üîë EC2 Key Name:"
          terraform output -raw ec2_key_name

          echo ""
          echo "üì° EC2 Public IP:"
          terraform output -raw ec2_public_ip

      - name: Terraform Destroy on Failure
        working-directory: lablink-allocator
        if: steps.apply.outcome == 'failure'
        run: terraform destroy -auto-approve -var="resource_suffix=${{ steps.setenv.outputs.env }}"
